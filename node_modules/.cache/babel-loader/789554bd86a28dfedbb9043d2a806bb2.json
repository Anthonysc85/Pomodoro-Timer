{"ast":null,"code":"var _jsxFileName = \"/Users/anthonycowan/Thinkful/Pomodoro-Timer/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusTimer from \"./FocusTimer\";\nimport BreakTimer from \"./BreakTimer\";\nimport PlayPause from \"./PlayPause\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [firstPlay, setFirstPlay] = useState(true);\n  const [onBreak, setOnBreak] = useState(false);\n  const [activeSession, setActiveSession] = useState(false);\n  const [focusTimer, setFocusTimer] = useState(25);\n  const [breakTimer, setBreakTimer] = useState(5);\n  const [durationMinutes, setDurationMinutes] = useState(25);\n  const [durationSeconds, setDurationSeconds] = useState(0);\n  const [initialBreakTimer, setInitialBreakTimer] = useState(5);\n  const [initialFocusTimer, setInitialFocusTimer] = useState(25);\n  const [durationProgress, setDurationProgress] = useState(0);\n\n  const increaseFocusTimer = () => setFocusTimer(currentTime => currentTime !== 60 ? currentTime + 5 : currentTime);\n\n  const decreaseFocusTimer = () => setFocusTimer(currentTime => currentTime !== 5 ? currentTime - 5 : currentTime);\n\n  const increaseBreakTimer = () => setBreakTimer(currentTime => currentTime !== 15 ? currentTime + 1 : currentTime);\n\n  const decreaseBreakTimer = () => setBreakTimer(currentTime => currentTime !== 1 ? currentTime - 1 : currentTime);\n\n  const percentage = (currentMinutes, currentSeconds, initialMinutes) => {\n    return 100 - (currentMinutes * 60 + currentSeconds) / (initialMinutes * 60) * 100;\n  };\n\n  useInterval(() => {\n    setDurationSeconds(second => {\n      second === 0 ? second = 59 : second -= 1;\n      if (second === 59) setDurationMinutes(minutes => minutes -= 1);\n      return second;\n    });\n    if (onBreak) setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialBreakTimer));else setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialFocusTimer));\n    if (durationMinutes === 0 && durationSeconds === 1) timerExpired();\n  }, isTimerRunning ? 1000 : null);\n\n  const timerExpired = () => !onBreak ? focusTimerExpired() : breakTimerExpired();\n\n  const breakTimerExpired = () => {\n    new Audio('https://bigsoundbank.com/UPLOAD/mp3/0899.mp3').play();\n    setOnBreak(state => state = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(second => second = 0);\n    setDurationMinutes(minutes => minutes = initialFocusTimer);\n  };\n\n  const focusTimerExpired = () => {\n    new Audio('https://bigsoundbank.com/UPLOAD/mp3/1482.mp3').play();\n    setOnBreak(state => state = true);\n    setDurationProgress(duration => duration = 0);\n    setDurationSeconds(second => second = 0);\n    setDurationMinutes(minute => minute = breakTimer);\n  };\n\n  const playPause = () => {\n    if (firstPlay) {\n      setInitialFocusTimer(duration => duration = focusTimer);\n      setInitialBreakTimer(duration => duration = breakTimer);\n      setDurationMinutes(duration => duration = focusTimer);\n      setFirstPlay(first => first = false);\n    }\n\n    setActiveSession(session => session = true);\n    setIsTimerRunning(prevState => !prevState);\n  };\n\n  const stopBtn = () => {\n    setFirstPlay(state => state = false);\n    setIsTimerRunning(timer => timer = false);\n    setOnBreak(state => state = false);\n    setActiveSession(session => session = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(second => second = 0);\n    setDurationMinutes(minute => minute = focusTimer);\n    setInitialFocusTimer(duration => duration = focusTimer);\n    setInitialBreakTimer(duration => duration = breakTimer);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusTimer, {\n    focusTimer: focusTimer,\n    increaseFocusTimer: increaseFocusTimer,\n    decreaseFocusTimer: decreaseFocusTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakTimer, {\n    breakTimer: breakTimer,\n    increaseBreakTimer: increaseBreakTimer,\n    decreaseBreakTimer: decreaseBreakTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlayPause, {\n    playPause: playPause,\n    classNames: classNames,\n    isTimerRunning: isTimerRunning,\n    stopBtn: stopBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    durationMinutes: durationMinutes,\n    durationSeconds: durationSeconds,\n    durationProgress: durationProgress,\n    onBreak: onBreak,\n    activeSession: activeSession,\n    initialBreakTimer: initialBreakTimer,\n    initialFocusTimer: initialFocusTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/anthonycowan/Thinkful/Pomodoro-Timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","FocusTimer","BreakTimer","PlayPause","ProgressBar","Pomodoro","isTimerRunning","setIsTimerRunning","firstPlay","setFirstPlay","onBreak","setOnBreak","activeSession","setActiveSession","focusTimer","setFocusTimer","breakTimer","setBreakTimer","durationMinutes","setDurationMinutes","durationSeconds","setDurationSeconds","initialBreakTimer","setInitialBreakTimer","initialFocusTimer","setInitialFocusTimer","durationProgress","setDurationProgress","increaseFocusTimer","currentTime","decreaseFocusTimer","increaseBreakTimer","decreaseBreakTimer","percentage","currentMinutes","currentSeconds","initialMinutes","second","minutes","currentProgress","timerExpired","focusTimerExpired","breakTimerExpired","Audio","play","state","progress","duration","minute","playPause","first","session","prevState","stopBtn","timer"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusTimer from \"./FocusTimer\";\nimport BreakTimer from \"./BreakTimer\";\nimport PlayPause from \"./PlayPause\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [firstPlay, setFirstPlay] = useState(true);\n  const [onBreak, setOnBreak] = useState(false);\n  const [activeSession, setActiveSession] = useState(false);\n\n  const [focusTimer, setFocusTimer] = useState(25);\n  const [breakTimer, setBreakTimer] = useState(5);\n  const [durationMinutes, setDurationMinutes] = useState(25);\n  const [durationSeconds, setDurationSeconds] = useState(0);\n  const [initialBreakTimer, setInitialBreakTimer] = useState(5);\n  const [initialFocusTimer, setInitialFocusTimer] = useState(25);\n\n  const [durationProgress, setDurationProgress] = useState(0);\n\n  const increaseFocusTimer = () => setFocusTimer((currentTime) => currentTime !== 60 ? currentTime + 5 : currentTime);\n  const decreaseFocusTimer = () => setFocusTimer((currentTime) => currentTime !== 5 ? currentTime - 5 : currentTime);\n  const increaseBreakTimer = () => setBreakTimer((currentTime) => currentTime !== 15 ? currentTime + 1 : currentTime);\n  const decreaseBreakTimer = () => setBreakTimer((currentTime) => currentTime !== 1 ? currentTime - 1 : currentTime);\n\n\n\n  const percentage = (currentMinutes, currentSeconds, initialMinutes) => {\n    return 100 - (((currentMinutes * 60) + currentSeconds) / (initialMinutes * 60) * 100);\n  }\n\n  useInterval(\n    () => {\n      setDurationSeconds(second => {\n        second === 0 ? second = 59 : second -= 1;\n        if (second === 59) setDurationMinutes(minutes => minutes -= 1);\n        return second;\n      })\n\n      if (onBreak) setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialBreakTimer));\n      else setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialFocusTimer));\n\n      if (durationMinutes === 0 && durationSeconds === 1) timerExpired();\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  const timerExpired = () => !onBreak ? focusTimerExpired() : breakTimerExpired();\n\n  const breakTimerExpired = () => {\n    new Audio('https://bigsoundbank.com/UPLOAD/mp3/0899.mp3').play();\n    setOnBreak(state => state = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(second => second = 0);\n    setDurationMinutes(minutes => minutes = initialFocusTimer);\n  }\n\n  const focusTimerExpired = () => {\n    new Audio('https://bigsoundbank.com/UPLOAD/mp3/1482.mp3').play();\n    setOnBreak(state => state = true);\n    setDurationProgress(duration => duration = 0);\n    setDurationSeconds(second => second = 0);\n    setDurationMinutes(minute => minute = breakTimer);\n  }\n\n  const playPause = () => {\n    if (firstPlay) {\n      setInitialFocusTimer(duration => duration = focusTimer);\n      setInitialBreakTimer(duration => duration = breakTimer);\n      setDurationMinutes(duration => duration = focusTimer);\n      setFirstPlay(first => first = false);\n    }\n    setActiveSession(session => session = true);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  const stopBtn = () => {\n    setFirstPlay(state => state = false);\n    setIsTimerRunning(timer => timer = false);\n    setOnBreak(state => state = false);\n    setActiveSession(session => session = false);\n\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(second => second = 0);\n    setDurationMinutes(minute => minute = focusTimer);\n    setInitialFocusTimer(duration => duration = focusTimer);\n    setInitialBreakTimer(duration => duration = breakTimer);\n  }\n\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusTimer focusTimer={focusTimer} increaseFocusTimer={increaseFocusTimer} decreaseFocusTimer={decreaseFocusTimer} />\n        <BreakTimer breakTimer={breakTimer} increaseBreakTimer={increaseBreakTimer} decreaseBreakTimer={decreaseBreakTimer} />\n      </div>\n      <PlayPause playPause={playPause} classNames={classNames} isTimerRunning={isTimerRunning} stopBtn={stopBtn} />\n      <ProgressBar durationMinutes={durationMinutes} durationSeconds={durationSeconds} durationProgress={durationProgress} \n      onBreak={onBreak} activeSession={activeSession} initialBreakTimer={initialBreakTimer} \n      initialFocusTimer={initialFocusTimer} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}